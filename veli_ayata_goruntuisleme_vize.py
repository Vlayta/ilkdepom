{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN3Ilat4dPTAMgTRG0WuJKr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Vlayta/ilkdepom/blob/main/veli_ayata_goruntuisleme_vize.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DIpLcG2zIuuT"
      },
      "outputs": [],
      "source": [
        "#@markdown El işaret noktası tespit sonuçlarını görselleştirmek için bazı fonksiyonlar oluşturduk. <br/> Aşağıdaki hücreyi çalıştırarak bu fonksiyonları etkinleştirin.\n",
        "# GEREKLİ KÜTÜPHANELER\n",
        "from mediapipe import solutions\n",
        "from mediapipe.framework.formats import landmark_pb2\n",
        "import numpy as np\n",
        "import cv2\n",
        "import screen_brightness_control as sbc  # Bilgisayar ekran parlaklığını kontrol etmek için kullanılır\n",
        "\n",
        "MARGIN = 10  # Piksel cinsinden kenar boşluğu\n",
        "FONT_SIZE = 1  # Yazı tipi boyutu\n",
        "FONT_THICKNESS = 1  # Yazı kalınlığı\n",
        "HANDEDNESS_TEXT_COLOR = (88, 205, 54)  # Canlı yeşil renk\n",
        "\n",
        "# Belirli bir landmark noktasının koordinatlarını piksel cinsinden döndüren yardımcı fonksiyon\n",
        "def koordinat_getir(landmarks, indeks, h, w):\n",
        "    landmark = landmarks[indeks]\n",
        "    return int(landmark.x * w), int(landmark.y * h)\n",
        "\n",
        "# Görselleştirme ve parlaklık kontrol fonksiyonu\n",
        "def draw_landmarks_on_image(rgb_image, detection_result):\n",
        "    # Tespit edilen el landmark listesi\n",
        "    hand_landmarks_list = detection_result.hand_landmarks\n",
        "    # Elin sağ mı sol mu olduğunu belirten liste\n",
        "    handedness_list = detection_result.handedness\n",
        "    annotated_image = np.copy(rgb_image)\n",
        "    h, w, c = annotated_image.shape\n",
        "    # Tespit edilen her bir el için işlem yap\n",
        "    for idx in range(len(hand_landmarks_list)):\n",
        "        # Elin tüm eklem noktalarını al\n",
        "        hand_landmarks = hand_landmarks_list[idx]\n",
        "\n",
        "        # Başparmak ve işaret parmak uçlarının koordinatlarını al\n",
        "        bas_x, bas_y = koordinat_getir(hand_landmarks, 4, h, w)  # Başparmak ucu\n",
        "        isaret_x, isaret_y = koordinat_getir(hand_landmarks, 8, h, w)  # İşaret parmak ucu\n",
        "\n",
        "        # İki parmak ucu arasındaki mesafeyi hesapla\n",
        "        mesafe = int(np.hypot(isaret_x - bas_x, isaret_y - bas_y))\n",
        "\n",
        "        # Mesafeyi 20 ile 150 piksel aralığında al ve 0-100 aralığına normalize et\n",
        "        parlaklik = np.interp(mesafe, [20, 150], [0, 100])\n",
        "\n",
        "        # Hesaplanan parlaklık değerini bilgisayar ekranına uygula\n",
        "        try:\n",
        "            sbc.set_brightness(int(parlaklik))\n",
        "        except Exception as e:\n",
        "            print(\"Parlaklik ayarlanamadi:\", e)\n",
        "\n",
        "        # Görsel üzerine işaretleme çizimleri yap\n",
        "        renk = (255, 255, 0)  # Sarı renk\n",
        "        ort_x = (bas_x + isaret_x) // 2  # Parmak uçlarının yatay ortası\n",
        "        ort_y = (bas_y + isaret_y) // 2  # Dikey ortası\n",
        "\n",
        "        annotated_image = cv2.circle(annotated_image, (bas_x, bas_y), 9, renk, 5)  # Başparmak işaretle\n",
        "        annotated_image = cv2.circle(annotated_image, (isaret_x, isaret_y), 9, renk, 5)  # İşaret parmak işaretle\n",
        "        annotated_image = cv2.line(annotated_image, (bas_x, bas_y), (isaret_x, isaret_y), (0, 255, 0), 2)  # Parmaklar arası çizgi çiz\n",
        "        annotated_image = cv2.putText(annotated_image, f'{int(parlaklik)}%', (ort_x, ort_y),\n",
        "                                      cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)  # Parlaklık değeri yaz\n",
        "\n",
        "        # El iskeleti çizimi için landmark verilerini protobuf formatına dönüştür\n",
        "        hand_landmarks_proto = landmark_pb2.NormalizedLandmarkList()\n",
        "        hand_landmarks_proto.landmark.extend([\n",
        "            landmark_pb2.NormalizedLandmark(x=landmark.x, y=landmark.y, z=landmark.z) for landmark in hand_landmarks\n",
        "        ])\n",
        "\n",
        "        # Elin kemik yapısını ve bağlantılarını çiz\n",
        "        solutions.drawing_utils.draw_landmarks(\n",
        "            annotated_image,\n",
        "            hand_landmarks_proto,\n",
        "            solutions.hands.HAND_CONNECTIONS,\n",
        "            solutions.drawing_styles.get_default_hand_landmarks_style(),\n",
        "            solutions.drawing_styles.get_default_hand_connections_style()\n",
        "        )\n",
        "\n",
        "        # Elin hangi taraf olduğunu (sağ/sol) belirtmek için metin koordinatlarını hesapla\n",
        "        height, width, _ = annotated_image.shape\n",
        "        x_coordinates = [landmark.x for landmark in hand_landmarks]\n",
        "        y_coordinates = [landmark.y for landmark in hand_landmarks]\n",
        "        text_x = int(min(x_coordinates) * width)\n",
        "        text_y = int(min(y_coordinates) * height) - MARGIN\n",
        "\n",
        "        # Elin sağ ya da sol olduğunu yazıya dök\n",
        "        handedness = handedness_list[idx]\n",
        "        cv2.putText(annotated_image, f\"{handedness[0].category_name}\",\n",
        "                    (text_x, text_y), cv2.FONT_HERSHEY_DUPLEX,\n",
        "                    FONT_SIZE, HANDEDNESS_TEXT_COLOR, FONT_THICKNESS, cv2.LINE_AA)\n",
        "\n",
        "    return annotated_image  # Üzerine çizim yapılan görüntüyü döndür\n",
        "\n",
        "# MODEL OLUŞTUR\n",
        "import mediapipe as mp\n",
        "from mediapipe.tasks import python\n",
        "from mediapipe.tasks.python import vision\n",
        "\n",
        "base_options = python.BaseOptions(model_asset_path='hand_landmarker.task')  # Model dosyasını yükle\n",
        "options = vision.HandLandmarkerOptions(base_options=base_options, num_hands=2)  # Aynı anda 2 el tespiti yapılacak şekilde ayarla\n",
        "detector = vision.HandLandmarker.create_from_options(options)  # El tespit modeli oluştur\n",
        "\n",
        "# KAMERA BAŞLAT GÖRÜNTÜ OKU\n",
        "cam = cv2.VideoCapture(0)  # Varsayılan kamerayı başlat\n",
        "# Kamera açık olduğu sürece sürekli döngüde çalış\n",
        "while cam.isOpened():\n",
        "    basari, frame = cam.read()  # Kameradan görüntü al\n",
        "    # Görüntü başarıyla alındıysa\n",
        "    if basari:\n",
        "        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # BGR'den RGB formatına dönüştür\n",
        "        mp_image = mp.Image(image_format=mp.ImageFormat.SRGB, data=frame)  # MediaPipe ile uyumlu formata çevir\n",
        "        # Adım 4: Görüntüden el landmarklarını tespit et\n",
        "        detection_result = detector.detect(mp_image)\n",
        "        # Adım 5: Sonuçları işle ve görselleştir\n",
        "        annotated_image = draw_landmarks_on_image(mp_image.numpy_view(), detection_result)\n",
        "        cv2.imshow(\"Image\", cv2.cvtColor(annotated_image, cv2.COLOR_RGB2BGR))  # Görseli ekranda göster\n",
        "\n",
        "        key = cv2.waitKey(1)  # Her kare için 1 ms bekle\n",
        "        # Eğer 'q' tuşuna basıldıysa programı sonlandır\n",
        "        if key == ord('q') or key == ord('Q'):\n",
        "            exit(0)\n"
      ]
    }
  ]
}